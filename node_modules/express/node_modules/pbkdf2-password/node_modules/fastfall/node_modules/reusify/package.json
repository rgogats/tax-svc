{
  "name": "reusify",
  "version": "1.0.1",
  "description": "Reuse objects and functions with style",
  "main": "reusify.js",
  "scripts": {
    "lint": "standard",
    "test": "tape test.js | faucet",
    "istanbul": "istanbul cover tape test.js",
    "coverage": "npm run istanbul; cat coverage/lcov.info | coveralls"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mcollina/reusify.git"
  },
  "keywords": [
    "reuse",
    "object",
    "performance",
    "function",
    "fast"
  ],
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mcollina/reusify/issues"
  },
  "homepage": "https://github.com/mcollina/reusify#readme",
  "engines": {
    "node": ">=0.10.0",
    "iojs": ">=1.0.0"
  },
  "devDependencies": {
    "coveralls": "^2.11.6",
    "faucet": "0.0.1",
    "istanbul": "^0.4.1",
    "pre-commit": "^1.1.1",
    "standard": "^5.2.1",
    "tape": "^4.2.0"
  },
  "readme": "# reusify\n\n[![npm version][npm-badge]][npm-url]\n[![Build Status][travis-badge]][travis-url]\n[![Coverage Status][coveralls-badge]][coveralls-url]\n\nReuse your objects and functions for maximum speed. This technique will\nmake any function run ~10% faster. You call your functions a\nlot, and it adds up quickly in hot code paths.\n\n```\n$ node benchmarks/createNoCodeFunction.js\nTotal time 52790\nTotal iterations 100000000\nIteration/s 1894298.1625307824\n$ node benchmarks/reuseNoCodeFunction.js\nTotal time 50582\nTotal iterations 100000000\nIteration/s 1976987.8612945317\n```\n\nThe above benchmark uses fibonacci to simulate a real high-cpu load.\nThe actual numbers might differ for your use case, but the difference\nshould not.\n\nThe benchmark was taken using Node v4.0.0.\n\nThis library was extracted from\n[fastparallel](http://npm.im/fastparallel).\n\n## Example\n\n```js\nvar reusify = require('reusify')\nvar fib = require('reusify/benchmarks/fib')\nvar instance = reusify(MyObject)\n\n// get an object from the cache\nvar obj = instance.get()\n\n// set the state\nobj.num = 100\nobj.func()\n\n// reset the state, if you depend on any\n// external object you need to null them\n// do not use delete, it is slow\nobj.num = 0\n\n// release an object from the cache\ninstance.release(obj)\n\nfunction MyObject () {\n  // you need to define this property\n  // so V8 can compile MyObject into an\n  // hidden class\n  this.next = null\n  this.num = 0\n\n  var that = this\n\n  // this function is never reallocated,\n  // so it can be optimized by V8\n  this.func = function () {\n    if (null) {\n      // do nothing\n    } else {\n      // calculates fibonacci\n      fib(that.num)\n    }\n  }\n}\n```\n\n## Why\n\nIt is faster because V8 do not have to collect all the functions you\ncreate. On a short-lived benchmark it is as fast as creating the\nnested function, but on a longer time frame it create less\npressure on the garbage collector.\n\n## Acknowledgements\n\nThanks to [Trevor Norris](https://github.com/trevnorris) for\ngetting me down the rabbit hole of performance, and thanks to [Mathias\nBuss](http://github.com/mafintosh) for suggesting me to share this\ntrick.\n\n## License\n\nMIT\n\n[npm-badge]: https://badge.fury.io/js/reusify.svg\n[npm-url]: https://badge.fury.io/js/reusify\n[travis-badge]: https://api.travis-ci.org/mcollina/reusify.svg\n[travis-url]: https://travis-ci.org/mcollina/reusify\n[coveralls-badge]: https://coveralls.io/repos/mcollina/reusify/badge.svg?branch=master&service=github\n[coveralls-url]:  https://coveralls.io/github/mcollina/reusify?branch=master",
  "readmeFilename": "README.md",
  "_id": "reusify@1.0.1",
  "dist": {
    "shasum": "72768daa99497511e65617c41fdda51ca8ed0e27"
  },
  "_from": "reusify@^1.0.0",
  "_resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.1.tgz"
}
